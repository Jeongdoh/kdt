# ----------------------------------------------
# dict 타입 => 인덱스 X, 키를 사용
# -형식 : { 키1:값, 키2:값,..., 키N:값}
# -요소/원소 :  변수명[키]
# -주의
#   -> 키 중복 가능, 중복 된 경우 마지막에 
#      지정된 값이 남음
# ----------------------------------------------
# 사람의 정보 저장하기
# 이름, 직업, 나이 3가지를 저장 
# ----------------------------------------------
# 데이터 저장용 변수 선언
person={}

# 입력 받기 
name=input("이름 : ")
job=input("직업 : ")
age=input("나이 : ")
age=int(age)

# 저장하기
person['name']=name
person['job']=job
person['age']=age

#확인
print('person=> %s' %person)

# 저장된 데이터에서 값 읽기
# 변수명[키]
print('당신의 이름은 %s' %person['name'])
print('당신의 직업은 %s' %person['job'])

# 직업 데이터 값이 변경
# 변수명[키]=새로운값
person['job']='경찰'

# --------------------------------------------
# 기본인 메서드 => 키만 가져오는 메서드
#              => 값만 가져오는 메서드
#              => 키/값 묶음으로 가져오는 메서드
# ---------------------------------------------
keys=person.keys()
values=person.values()
items=person.items()

# --------------------------------------------
# 값을 가져오는 메서드 => dict.get(키)
#              - 존재하지 않는 키인경우 None 반환
#              - 존재하는 키면 값을 반환
# ---------------------------------------------
#print(person['gender'])
print('gener => %s' %person.get('gender'))
print('gener => %s' %person.get('gender', '존재하지 않는 키')) # ,콤마 하고 나오고자 하는 메시지 넣으면 none대신 출력해줌
print('name => %s' %person.get('name', '존재하지 않는 키'))

# dict 안에 모든 데이터 삭제 메서드 => dict.clear()
# 빈 딕셔너리가 됨
#--------------------------------------------------
print('현재 요소 갯수 : %s개' %len(person))
person.clear()
print('현재 요소 갯수 : %s개' %len(person))

# -------------------------------------------------
# dict안에서 지정된 키의 값을 꺼내는 메서드 즉 삭제 
# => dict.pop(키)

person['name'] ='Hong'
person['loc'] ='Daegu'

print('loc의 값 => %s' %person.pop('loc'))
print('person => %s' %person)

# -----------------------------------------------------
# dict안에서 뒷부분에 키와 값을 튜플형식으로 꺼내는 메서드
# => dict.popitem()
# -----------------------------------------------------
person={}
person['job'] ='학생'
person['age'] =20

print(person.popitem())
print('person => %s' %person)

# -----------------------------------------------------
# 여러개의 데이터를 키=값 형태로 추가하는 메서드
# => dict.update(키1=값, 키2=값,....)
# 키는 str타입만 가능하며 '',"" 하지 않음
# -----------------------------------------------------
person.update(name='베트맨', phone='010-111-222')
print(person)


