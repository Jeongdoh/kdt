#개념 정리

# 오버로딩
#  같은이름, 다른 매개변수 종류, 변수
# 공식지원 안된다고 하는데 @overload사용가능

#정보은닉(캡술화)
#__속성명 : 비공개 즉, 객체 변수로 접근 못함
#읽기 get속성명
#쓰기 set속성명
#__메서드명()

#오버라이딩(반드시 필수로 상속되야하고 구현부만 다시 작업)
#상속관계 *구현부만 다시 작업
#부모의 메서드를 받음

#-------------------------------------------------------------------------
# 데코레이터(Decorator) : 메서드에 명확한 의미를 부여
# 형식 : @XXX
#-------------------------------------------------------------------------
#-------------------------------------------------------------------------
#클래스 및 메서드 종류
# - 완성된 클래스 => 클래스
# - 미완성 클래스 => 추상 클래스(ABSTRACT CLASS)
#                   미구현 (코드없는 메서드) 메서드를 가지고 있는 클래스
#                   abc코듈 모함해서 사용함                     
#-------------------------------------------------------------------------
# 메서드 종류
# - 객체 생성해야만 사용가능한 메서드 => self
#       - 인스턴스 메서드
# - 객체 생성 없이 사용가능한 메서드 => cls
#       - 정적메서드 --> 객체없이 사용 가능
#       - 클래스 메서드 --> 클래스정보(cls) 가진 객체없이 사용 가능
#
#-------------------------------------------------------------------------
#-------------------------------------------------------------------------
#학생정보 클래스
# - 클래스명: Student
# - 속   성
#       -클래스 속성 : school
#       -인스턴스 속성 : name, number, grade
# - 메서드
#       -클래스 메서드:학교명 출력가능
#       -정  적 메서드:학교명 출력가능
#-------------------------------------------------------------------------
class Student:
    #클래스 속성
    school='대구중학교'

    #인스턴스 즉 객체 생성 및 초기화 메서드
    def __init__(self,name,number,grade):
        self.name=name
        self.number=number
        self.grade=grade

    #객체 미생성으로 사용 가능한 메서드들
    @staticmethod
    def showSchoolName(count):
        Student.school='Happy중학교'
        print(f'[staticmethod]school=> {Student.school}-{count}')


    @classmethod
    def printSchool(cls, count):
        print(f'cls==>{cls}')
        print(f'[classmethod] school=> {cls.school}-{count}')
    



#-------------------------------------------------------------------------
# 대학생 정보를 담고있는 클래스
# 클래스명 : BicStudent
# 속   성 : 학교, 이름, 번호, 학년, 전공
#-------------------------------------------------------------------------
class BicStudent(Student):
    # 클래스 변수
    school='한국대학교'

    #인스턴스 즉 객체 생성 및 속성 초기화 메서드
    def __init__(self, name, number, grade, major):
        super().__init__(name, number, grade)
        self.major=major

    




#클래스 및 객체 사용하기
print(Student.school)
Student.showSchoolName(1)
Student.printSchool(1)

BicStudent.showSchoolName(2)        # 정적 메서드 / static 메서드 
BicStudent.printSchool(2)           # 클래스 메서드