#-------------------------------------------------------------------------------
#상속(inheritance) - 재사용 및 기능확장
#-------------------------------------------------------------------------------
#
#-------------------------------------------------------------------------------
#포인트를 나타내는 데이터 타입 => 클래스
#   클래스 명=> Point2D
#- 속성/필드
#   좌표(10, 5)
#- 기능/역할
#   점 찍기
#   동그라미 그리기
#   별그리기
#-------------------------------------------------------------------------------
class Point2D:
    # 클래스 변수

    # 인스턴스 생성 및 변수 초기화 메서드
    def __init__(self,x,y):
        self.x=x
        self.y=y

    #인스턴스 메서드
    def pointting(self):
        print(f'{self.x},{self.y}에 점찍기')

    def drawCircle(self, color):
        print(f'{self.x},{self.y}위치에 {color}색상 동그라미 그리기')

    def drawStar(self, action):
        print(f'{self.x},{self.y}위치에 {action} 별 그리기')

#-------------------------------------------------------------------------------
#3d 입체공간에 포인트를 나타내는 데이터 타입 => 클래스
#   클래스 명=> Point3D
#- 속성/필드
#   좌표 x,y,z
#- 기능/역할
#   점 찍기
#   동그라미 그리기
#   별그리기
#   별 회전하기
#-------------------------------------------------------------------------------------
# class Point3D:
#     # 클래스 변수

#     # 인스턴스 생성 및 변수 초기화 메서드
#     def __init__(self,x,y,z):
#         self.x=x
#         self.y=y
#         self.z=z

#     #인스턴스 메서드
#     def pointting(self):
#         print(f'{self.x},{self.y},{self.z}에 점찍기')

#     def drawCircle(self, color):
#         print(f'{self.x},{self.y},{self.z}위치에 {color}색상 동그라미 그리기')

#     def drawStar(self, action):
#         print(f'{self.x},{self.y},{self.z}위치에 {action} 별 그리기')


#-------------------------------------------------------------------------------------
#Point2D 클래스 상속 받음-------------------------------------------------------------
# 부모클래스/슈퍼(super)클래스 -- Point2D
# 자식클래스/서브(sub)클래스 -- Point3D
# 상속관계 사용되는 키워드 => super
#-------------------------------------------------------------------------------------

class Point3D(Point2D):

    #인스턴스 객체 생성 및 속성 초기화 메서드
    def __init__(self, x, y, z):
        super().__init__(x, y)
        self.z=z

    # 상속받은 부모클래스로부터 메서드의 구현부분을 변경 => 오버라이딩(over riding)
    # 동일 -메서드명, 매개변수
    # 변경 -기능구현 코드
    def drawCircle(self, color):
        print(f'{self.x},{self.y},{self.z}위치에 {color}색상 동그라미 그리기')

    # def rotationStar(self, degree):
    #     pass

#-------------------------------------------------------------------------------------

# 인스턴스 객체 생성하기 ==> 클래스명( 매개변수)<-- __init__ 메서드랑 갯수 같아야함
bluePoint=Point2D(20,4)
bluePoint.drawCircle('파랑색')
bluePoint.drawStar('반짝반짝')

#-------------------------------------------------------------------------------------

pinkPoint=Point3D(10,5,3)
pinkPoint.drawCircle('pink')

#-------------------------------------------------------------------------------------
pinkPoint=Point3D(10,5,3)
pinkPoint.drawStar('pink')

#-------------------------------------------------------------------------------------

pinkPoint=Point3D(10,5,3)
pinkPoint.pointting()

